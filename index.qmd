---
format: 
    revealjs:
        theme: default
        logo: "images/JAX_logo_rgb_transparentback.png"
        slide-number: true
        footer: Imaging Applications, Research IT
        transition: "slide"
        highlight-style: arrow
        chalkboard: 
            buttons: false
        controls-layout: bottom-right
        controls: true
from: markdown+emoji
---

## Introduction to QuPath

**Peter Sobolewski (he/him)**

Systems Analyst, Imaging Applications

Research IT

:::: {.columns style='display: flex'}
::: {.column width="50%" style='display: flex; justify-content: left; align-items: center;'}

### [https://qupath.github.io](https://qupath.github.io) 

:::
::: {.column width="50%" style='display: flex; justify-content: center;'}

![](images/qupath_128.png){fig-alt="QuPath logo" width=250} 

:::
::::

## Welcome

## What is QuPath?

QuPath is an open-source image analysis program

<br/>

**Key feature**:  
QuPath has a graphical user interface (`GUI`) for performant working with very large 2D images, like those produced by slide scanners

## A bit of background

- project was started at The Queen's University Belfast by Pete Bankhead
- first public release was in October 2016
- currently developed by [Pete Bankhead's group at The University of Edinburgh](https://www.ed.ac.uk/pathology/people/staff-students/peter-bankhead)
- \>7500 publications [using QuPath](https://scholar.google.com/scholar?start=0&q=qupath)

:::{.callout-important}
### If you use it, cite it! 
[https://qupath.readthedocs.io/en/stable/docs/intro/citing.html](https://qupath.readthedocs.io/en/stable/docs/intro/citing.html)
:::


## Strengths of QuPath

- Was designed for very large, multiscale 2D files

- Includes extensitve annotation, overlay, and visualization options

- It includes robust algorithms for common analysis tasks

- It includes *interactive* machine learning for pixel and object classification

- Recordable workflows allow for easy batch processing

- Integrated ImageJ

- Robust scripting support (Groovy)

## Limitations

- Limited *3D & time series viewing* capabilities:
    - single planes only

- Some complex functions require scripting

- Extension ecosystem is relatively limited

- No support for zarr/NGFF

## Getting help

- In-app documentation: Help menu
- Online documentation: [https://qupath.readthedocs.io/en/stable/index.html](https://qupath.readthedocs.io/en/stable/index.html)
    - Includes tutorials, scripting, advanced concepts
- YouTube Channel: [https://www.youtube.com/c/QuPath](https://www.youtube.com/c/QuPath)
- Image.sc Forums: [https://forum.image.sc/tag/qupath](https://forum.image.sc/tag/qupath)

## Key concept: QuPath `project`

- `projects` are the best way to organize your analysis work
- `projects` are frequently required by some scripts/extensions
- `projects` are folders:
    - group together related images
    - organize data, scripts, classifiers, etc. 

## How create a project?

- `Create project` button
- File ‣ Project… ‣ Create project

:::{.callout-important}
**When making a project, remember to create a folder for it!**
:::

- Drag-and-drop an empty folder

## Anatomy of a QuPath `project`

![](images/project_folder.png){fig-alt="Screenshot showing the contents of a QuPath project folder." fig-align="center"}

## How to add images to a project?

- Drag and drop
- File ‣ Project… ‣ Add images

:::{.callout-note}
#### image files will not be copied into your `project` folder!
- A link (`URI`) will be used! 
- If you move the file(s) you will be prompted to update the link.
:::

:::aside
QuPath can handle large 2D images, e.g. whole-slide images—*there is no need to make tiles first*
:::

## QuPath will never edit your image files!
- `images` in a `project` are actually QuPath objects holding metadata, annotations, etc.
- The image data/pixels are accessed from the files via an `ImageServer`
- Duplicating/saving `images` within a `project` only relates to QuPath specific data, **not** the original files or pixels

:::{.callout-important}
### When images are removed from a project, the data files are not deleted!
:::

# Let's make our first QuPath project!

## Launch QuPath

![](images/qupath_welcome.png){fig-alt="Screenshot showing the QuPath welcome screen." fig-align="center"}

## Click `Create project`

![](images/create_project_1.png){fig-alt="Inset of screenshot showing the `create project` button in red." fig-align="center"}

## Make sure to make a new, empty folder

![](images/create_project_2.png){fig-alt="Screenshot showing the file browser with the `New Folder` button in red." fig-align="center"}

## Select the empty folder for the project

![](images/create_project_3.png){fig-alt="Screenshot showing the file browser with empty project folder." fig-align="center"}

## Add an image

![](images/add_image_1.png){fig-alt="Inset of screenshot showing the `Add images` button in red." fig-align="center"}

### Use drag-and-drop!

## Use `Choose files`—or drag-and-drop

![](images/add_image_2.png){fig-alt="Screenshot of `Import images to project` dialog with `Choose files` button in red." fig-align="center"}

## Click `Import`

![](images/add_image_3.png){fig-alt="Screenshot of `Import images to project` dialog." fig-align="center"}

### Defaults are OK for the majority of cases

## Set Image type

![](images/set_image_type.png){fig-alt="Screenshot of `Set image type` dialog." fig-align="center"}

:::{.callout-important}
### This affects the behavior of tools & features! (but you can change it)
:::

## :tada: QuPath project with an image :tada:

![](images/QuPath_main_window.png){fig-alt="Screenshot of QuPath application window with a single image in the `Analysis pane`." fig-align="center"}

# QuPath GUI layout

## Analysis Pane: Project tab

![](images/analysis_pane.png){fig-alt="Inset of screenshot of QuPath application window with a single image in the `Analysis pane` Project tab." fig-align="center"}

### Double-click an image to open it in the `viewer` on the right -- it will be bolded in the list

## Analysis Pane: Project tab

### Right-click on images to:
- Rename, remove or duplicate
    - When you duplicate, can choose to also copy the QuPath object data files
- To add metadata or descriptions
- Blind/Mask samples: replace names with hashes

:::{.callout-important}
### These changes only affect the QuPath objects in this project, not your data files!
:::

## Analysis Pane: Image tab

![](images/analysis_pane_image.png){fig-alt="Inset of screenshot of QuPath application window `Analysis pane` with CMU-1.svs image open." fig-align="center"}

## Analysis Pane: Image tab

- Name and location of the image file
- Pixel width/height: scale calibration, **very important**
    - can set yourself using a `Line` annotation
- Server type: how QuPath is reading the raw image file, set at import
- Pyramid: levels of downsampling for performance
- Image type: determines some default functions, e.g. channel information

## QuPath viewer

![](images/qupath_viewer.png){fig-alt="Screenshot of QuPath application window with elements of the viewer highlighted in red." fig-align="center"}

- Minimap: Image overview, allows for quick navigation
- Info bar: gives Pixel coordinate and value
- Right-click the viewer to close or make a grid

# QuPath toolbar

## QuPath toolbar

![](images/QuPath_toolbar.png){fig-alt="Screenshot of QuPath application window with the toolbar marked in red." fig-align="center"}

## QuPath toolbar: information

![](images/QuPath_info_tools.png){fig-alt="Screenshot of QuPath application window with the Prefereces, Log, and Interactive Help tools marked in red." fig-align="center"}

## QuPath toolbar: information

- Preferences: settings that customize QuPath behavior, including look-and-feel, extensions, etc.
- Log: message logger, showing Info, Warnings, and Errors—helpful when troubleshooting or asking for help
    - `Dot` notifies of un-read Errors
- ***Interactive Help***: Provides contextual help based on state of application/viewer, what you mouse over, etc. 
    - `Dot` notifies for potential problems, will offer solutions 

## QuPath toolbar: Annotation tools

![](images/QuPath_annotation_tools_1.png){fig-alt="Inset of screenshot of QuPath application window (top left) showing annotation tools in red." fig-align="center"}

- **+** : Move tool: pan around the image or move objects
- For the Polygon tool: double-click to end
- Magic wand: context-aware brush that takes into account intensity & zoom
- For Brush & Wand tool, `Alt/Option` key enables subtract mode
- **S** : Switch to selection mode, where tools *select* objects instead

## QuPath toolbar: brightness & contrast, zoom

![](images/toolbar_BC_zoom.png){fig-alt="Inset of screenshot of QuPath application window (top left) showing B&C and Zoom tools in red." fig-align="center"}

- Brightness & contrast dialog also allows for control of channels and colormaps
- Can manually specify a zoom level by double-click
- Zoom button resets zoom to fit whole image in viewer

## QuPath toolbar: show/hide & fill, opacity

![](images/toolbar_show_hide.png){fig-alt="Inset of screenshot of QuPath application window (top left) showing Annotation and Detection Show/Hide tools in red." fig-align="center"}

- Enable showing Annotations or Detections, plus whether they are filled
- `C`: show/hides pixel classification overlay
- Slider controls opacity, so you can see through to the data beneath

:::{.callout-important}
### If you can't see things you expect, check that they arn't hidden!
:::

## QuPath toolbar: measurements table & scripting

![](images/toolbar_meas_script.png){fig-alt="Inset of screenshot of QuPath application window (top left) showing the Measurement Table and Script Editor tools in red." fig-align="center"}

- Measurement Table drop-down menu enables opening a table view of measurements associated with different object types
- The Script Editor is used for automation and advanced tasks

# Making & Managing Annotations

## Annotation tool keybindings

- Tools are also accessible in the `Tools` menu, which shows the shortcuts

![](images/QuPath_tools_menu.png){fig-alt="Inset of screenshot of QuPath  window (top left) showing annotation the Tools menu." fig-align="center"}

## Annotation tool preferences

![](images/Pref_drawing_tools.png){fig-alt="Inset of screenshot of QuPath  Preferences dialog showing the settings for the drawing tools." fig-align="center"}

## Annotation tool tips and tricks

- Annotations are editable, unless you lock them (Right-click ‣ Lock)
- Move tool can be toggled with `Spacebar`
    - Double-click to *select* objects
- For Ellipse & Rectangle can also use Objects ‣ Annotations… ‣ Specify annotation
- To start fresh: Objects ‣ Delete… ‣ Delete all annotations
- Brush and Wand scale with zoom; they become more precise as you zoom in

## Annotation tool tips and tricks

- You can use the Brush or Wand tool to refine selected Annotations
    - start from the *inside* of the annotation, to expand it
        - Note: if you want to make an Annotation *inside* another Annotation, you need to first lock it.
    - hold `Alt/Option` and start from the *outside* to reduce it
- Use `Shift` with the Brush or Wand to add to an Annotation (discontinous)

## Analysis Pane: Annotation tab

![](images/manage_annotations.png){fig-alt="Screenshot of QuPath  application  showing the Annotations tab of the Analysis Pane in red." fig-align="center"}

- Annotation list lets you select, delete
    - Right-click to **lock** or edit properties (name, color)
    - You can shift or control click to multi-select
- Classification list lets you assign Annotations to `classes`

## Analysis Pane: Annotation tab: Classes

![](images/annotations_classes_submenu.png){fig-alt="Screenshot of QuPath  application  showing the Annotations tab of the Analysis Pane with the Classes submenu shown in red." fig-align="center"}

- Classes group objects in a more powerful way than names
- You can add your own classes or remove existing ones
    - Note: `Populate` commands refer to the **class list**

:::{.callout-important}
### Majority of QuPath functions rely on using Classes
:::

## Analysis Pane: Annotations tab: Set and autoset

![](images/annotations_classes_set.png){fig-alt="Screenshot of QuPath  application  showing the Annotations tab of the Analysis Pane with the `Set selected` and `Auto set` buttons shown in red." fig-align="center"}

- `Set selected` assigns all selected Annotations to a selected class
- `Auto set` assigns all new Annotations (regardless of type) to the selected class

:::{.callout-important}
### Classes with a `*` are ignored in measurements, percentages, etc.
:::

## Analysis Pane: Annotation measurements

![](images/Annotation_measurements_1.png){fig-alt="Inset of screenshot of QuPath  application showing the Annotations measurements pane of the Annotations tab of the Analysis Pane." fig-align="center"}

- Annotations have basic Measurements that depend on their type (length, area, perimeter, etc.)

## Annotation measurements: measurement tables

![](images/toolbar_meas_script.png){fig-alt="Inset of screenshot of QuPath application window (top left) showing the Measurement Table and Script Editor tools in red." fig-align="center"}

- You can generate a table using the `Show measurements table` Toolbar button

## Analysis Pane: Hierarchy tab

- Presents the relationship between objects:
    - Parent ‣ Child
    
:::{.callout-important}
### For Annotations, the entire area of a child must be inside the parent
:::

- Objects ‣ Annotations… ‣ Resolve hierarchy 
    - QuPath will place **all** child objects with parent objects 
- Objects ‣ Annotations… ‣ Insert into hierarchy
    - QuPath will insert **the selected** objects into the hierarchy

# Setting stain vectors

## Start with a clean copy

- Let's start by duplicating our image:
    - Analysis Pane ‣ Projects tab
    - Right-click the image and select `Duplicate`
    - **Un-check** `Also duplicate data files`

![](images/duplicate_image_no_data.png){fig-alt="Screenshot of QuPath `Duplicate image` dialog, with `Also duplicate data files` in red." fig-align="center"}

## Stain separation/deconvolution

- Aims to extract information about individual chromogenic stains from the RGB values of each pixel
- e.g. convert (R, G, B) to (H, E, residual)

:::{.callout-note}
### For fluorescence images, single channels are typically collected, so this isn't needed.
:::

- When you select `image type` on import, default separation is performed

## Setting stain vectors

- Use Annotation tools to make a small Annotation that includes:
    - some background
    - some pixels of each stain
- Analyze ‣ Estimate stain vectors

![](images/Analyze_stain_vectors.png){fig-alt="Screenshot of QuPath Analyze menu with `Estimate stain vectors` highlighted in blue." fig-align="center"}

## Estimate stain vectors

![](images/Est_stain_vec_modal.png){fig-alt="Screenshot of QuPath `Estimate stain vectors` dialog`." fig-align="center"}

- QuPath has detected that the most common pixel value (the mode) is different from the current background
- Click `Yes` to set the new value

## Visual stain editor

![](images/visual_stain_editor.png){fig-alt="Screenshot of QuPath `Visual stain editor` dialog with red arrows indicating the handles of the stain vectors, as well as the Auto button and the `exclude unrecognized stains` checkbox." fig-align="center"}

## Visual stain editor

- At the bottom are settings for `Auto` vector estimation
- Click `Auto` to get an intial estimate
- Look at the color panels, which are views at the 3D colorspace from orthogonal sides
    - if you have other pixels, can try to exclude them (checkbox) and run Auto again
- want the vectors to encompass the reddish-pink-purple pixels (those of H&E)
- Can manually tweak the vectors by using the handles

## Checking the results: Brightness & Contrast

![](images/brightness_contrast.png){fig-alt="Screenshot of QuPath `Brightness & Contrast` dialog with red arrows indicating the handles of the stain vectors, as well as the Auto button and the `exclude unrecognized stains` checkbox." fig-align="center"}

- Want visual separation between stains and low residual

# Automated Annotations via Thresholding

## Thresholding in QuPath

- Thresholding is a type of `Pixel Classification`
    - Is a given pixel above or below a certain numeric value?
    - Assign it to a Class
- Most commonly used to create Annotations, e.g. Tissue vs. background
- Menu: Classify ‣ Pixel classification ‣ Create thresholder

![](images/classify_thresholder.png){fig-alt="Screenshot of QuPath menus: Classify > Pixel classification, with `Create thresholder` highlighted in blue." fig-align="center"}

## Pixel classification ‣ Create thresholder

![](images/Classify_create_thresholder.png){fig-alt="Screenshot of QuPath `Create thresholder` dialog highlighted in blue." fig-align="center"}

## Thresholder parameters

- Resolution: lower resolution is less computationally intensive, but loses details
- Channel: channel(s) to compare vs. threshold
    - for RGB images or tissue detection,  `Average channels` can be a good choice
- Prefilter: preprocessing to apply prior to thresholding
    - Gaussian is typical, to smooth out noise
- Smoothing sigma: radius of prefilter, in pixels

## Thresholder parameters

- **Threshold**: numeric value that will be used

:::{.callout-note}
- For RGB, white is (255, 255, 255) and black is (0, 0, 0)
- For intensity channels (e.g. stains), 0 is background and higher values represent signal
:::

- Above threshold: the class that these pixels will be assigned to
- Below threshold: the class that these pixels will be assigned to

## Thresholder post-processing

:::{.callout-important}
You need to save your thresholder before you can use it!
:::

- Measure: requires existing Annotations, gives areas and % of classes
- **Create objects**: creates objects and assigns them to the classes
- Classify: assigns Detections to the classes

## Thresholder: Create objects

![](images/Pixel_classifier_choose_parents.png){fig-alt="Screenshot of QuPath `Pixel classifier` dialog showing `Full image`." fig-align="center"}

- Choose the parent of the new objects, generally for Tissue you want it to be the image

## Thresholder: Create objects

![](images/Pixel_classifier_choose_parents.png){fig-alt="Screenshot of QuPath `Create objects` dialog." fig-align="center"}

We are segmenting 4 large tissue slices, so we want to make:
- Annotations, that are large, without holes
- Separate objects (of the same class) for each slice

## Thresholder: Load classifier to reuse

We saved our classifier (thresholder), so we can re-use it:

![](images/load_pixel_classifier_menu.png){fig-alt="Screenshot of QuPath `Classify` menu showinf the `Load classifier` dialog." fig-align="center"}

![](images/load_pixel_classifier.png){fig-alt="Screenshot of QuPath `Load pixel classifier` dialog." fig-align="center"}
